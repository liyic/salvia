After reading this guide, you should be able to create a minimalist blog site featuring a home page that shows list of your post abstracts, as well as a reader page that displays an individual post.

Steps:

0. [Directory Structure](#dir-structure)
1. [Preparing Sample Post](#prepare-sample)
2. [Configuring Napa](#config)
3. [Linking Napa](#link)
4. [Creating Home Page](#create-home)
5. [Creating Post Reader Page](#create-post-reader)

## Directory Structure {{ NodeID: dir-structure }}

A basic Napa project follows the structure below:

```
root
├── posts
|   ├── your_post.md.txt
|   └── your_another_post.md.txt
├── themes
|   ├── theme_folder
|   └── another_theme_folder
└── napa.config.json
```

#### `posts`

> The folder to store your posts. Using <code>.txt</code> extension instead of <code>.md</code> to ensure that the file being correctly intepreted by browser.

#### `themes`

> The folder storing [themes](./post.html?postKey=use_theme). A theme is a collection of CSS stylesheets and other supporting files (e.g. fonts).</dd>

#### `napa.config.json`

> Stores [configuration](#config) data.

## Preparing Sample Post {{ NodeID: prepare-sample }}

Create a text file `hello_napa.md.txt` inside `post` folder with following contents:

```
Hello Napa!

{{ AbstractBreaker }}

![A Sample Image](https://i.imgur.com/FwTyhOJ.png)
```

The "mustache tag", `{{ AbstractBreaker }}`, indicates there's an abstract breaker. Contents before this tag would be treated as abstract of this post. When rendering a post you have the choice to render the whole post or render the abstract only. For more information, see [Napa API](./post.html?postKey=api_doc).

## Configuration {{ NodeID: config }}

Then we need to set up configuration. Create `napa.config.json` file in the root folder:

```json
{
    "blog": {
        "title": "Your First Napa Blog!",
        "theme": "napa-green"
    },
    "nav": [
        { "text": "Home", "href": "./index.html" }
    ],
    "posts": [
        "2018-03-29||your_name||hello_napa||Hello Napa!"
    ]
}
```

#### `blog.title`

> This your blog title displaying in the header.

#### `blog.theme`

> The name of theme folder under your `themes` folder. Here `napa-green` is Napa's default theme.

#### `nav`

> This array of objects defines the items of the navigation bar.

#### `posts`

> This array of strings defines your post list. Each string has four parts, date, author, key and title, splitted by `||`. Title is optional. If you don't provide the title, the key would be used as the title.

Here we successfully configured a Napa blog with only one sample post. Now we're ready to start writing pages.

## Linking Napa {{ NodeID: link }}

Napa depends on [CommonMark](http://commonmark.org) as Markdown parser and [Prism](http://prismjs.com) as code highlighter. First, be sure to link `prism.css` in your page to make Prism work correctly:

```markup
<link href="./css/prism.css" rel="stylesheet" />
```

Then link Napa script to the page:

```markup
<script src="./js/napa.min.js"></script>
```

Or, for development use, you may import scripts separately (be sure to follow the order):

```markup
<script src="./src/commonmark.min.js"></script>
<script src="./src/prism.js"></script>
<script src="./src/napa.js"></script>
```

## Create Page: Home {{ NodeID: create-home }}

Once setup is done, creating pages gotta be easy. Napa provides a bunch of building blocks. All you need to do is to choose what you need and compose each page.

A home page for a blog is usually a "feed" page. People would see a list of your abstracted posts. Create a `index.html` and put following things:

HTML:

```markup
<header id="header"></header>
<main id="feed"></main>
<footer id="footer"></footer>
```

JavaScript:

```javascript
let blog = new Napa({
    el: {
        header: '#header',
        feed: '#feed',
        footer: '#footer'
    }
});
```

And here we go!

In the object we passed to Napa constructor, the `el` property defines the [components](./post.html?postKey=api_doc) you choose to build this page. In this example, we simply feed Napa with `feed` component to the `<main>` tag, then add a `header` to `<header>` tag and a `footer` to `<footer>` tag.

## Create Page: Post Reader {{ NodeID: create-post-reader }}

A post reader is a page that displays a single post. Craete a `post.html` and add:

HTML:

```markup
<header id="header"></header>
<main id="post"></main>
<footer id="footer"></footer>
```

JavaScript:

```javascript
let blog = new Napa({
    el: {
        header: '#header',
        post: '#post',
        footer: '#footer'
    },
    options: {
        postKey: Napa.util.getUrlParamValue('postKey')
    }
});
```

Note there's a bit difference because here we need 'options' here. for the post reader page, we need to pass the key to Napa so that we can grab the right post we want. In this example, we'll pass the
post key through URL parameters. For example, visiting `post.html?postKey=hello_napa` will load our sample post with the key `hello_napa`. Napa provides a function `getUrlParamValue()` to do URL parameter parsing jobs for you. [See API](./post.html?postKey=api_doc) for more information.

> Note:
> You must use `post.html` for the name of post reader page for now. It is NOT CONFIGURABLE during current version.

Now you could open you favorite browser and check your freshly cooked Napa blog.

Congrats and enjoy!
